循环结构

当需要在某一个场合进行条件的判断，有所选择的去执行一段代码，需要分支结构
当需要在某个场合重复去做一件事情，需要使用循环结构

for循环

<1>语法格式
    for(初始表达式1;条件表达式2;修改初始条件的表达式3){

            语句块1;//（循环体）
    }
        语句块2;


<2>执行流程
        执行初始表达式1=>判断条件表达式2是否成立
            =>成立，则执行语句块1=>修改初始条件的表达式3 =>判断条件表达式2是否成立
            =>不成立,则执行语句块2;

for循环练习

1.打印1-100的所有奇数(要求使用两种不同的思路实现)

2.循环输入5个商品的价格，并计算平均价格。

3.计算1~100之间的和。

4.要求打印出所有的三位数的水仙花数
所谓“水仙花数”即一个整数满足其值等于各个数位的立方和。例如：
153是一个水仙花数，因为153=13+53+33


1*1*1+5*5*5+3*3*3 = 153

break和continue

break关键字可以用于switch-case结构和循环中，表示跳出当前结构执行后续的语句；

continue关键字只能用于循环结构中，表示结束本次循环继续下一次循环(熟悉)

特殊的循环

for(;;){}  - 这种没有明确循环条件的循环叫做无限循环，俗称“死循环”。
通常使用在没有明确循环次数的场合中，与break关键字搭配使用。

双重循环

<1>语法格式
    for(初始表达式1;条件表达式2;修改初始条件的表达式3){
        for(初始表达式4;条件表达式5;修改初始条件的表达式6){

            语句块1;//（循环体）
        }
    }


<2>执行流程
    执行表达式1=>判断条件表达式2是否成立
        =>成立,则执行初始表达式4 => 判断条件表达式5是否成立
            =>成立，则执行语句块(循环体); => 执行表达式6 =>条件表达式5是否成立
            =>不成立,则语句块(循环体)结束 => 执行表达式3 =>判断条件表达式2是否成立

        =>不成立，则外层循环结束。

while循环

<1>语法格式
    while(条件表达式){
        循环体;
    }
        语句块;

<2>执行流程
    判断条件表达式是否成立
        =>成立,执行循环题 => 判断条件表达式是否成立
        =>不成立,则执行语句块


<3>注意事项
        1.while循环和for循环是可以互补的。
        2.while循环通过使用在明确循环条件但不明确循环次数的场合中;
          for循环通常使用在明确循环次数/范围的场合中使用.（推荐）

        3.与for(;;){} 都表示无限循环的方式是   ： while(true){}  

do-while

<1>语法格式
    do{
        循环体;
    }while(条件表达式);

    语句块;

<2>执行流程
        执行循环体=> 判断条件表达式是否成立
            =>成立，则执行循环体=>判断条件表达式是否成立
            =>不成立，则执行语句块。


<3>注意事项
    do-while循环通常使用在至少需要执行一次循环体的场合中，而while循环可以不执行。
