多态
基本概念

多态就是指同一种事物表现出来的多种形态。

饮料：可乐、雪碧、红牛、美年达、.............
宠物：狗、猫、鸟、..........
整数： byte b = 10;    short s = 10;  int i = 10；.......


C++多态分为两种：编译多态、运行时多态


Java中的多态只有一种，就是运行时多态。是一种运行期间的行为，而不是编译期的行为。

语法格式

父类类型   引用 = new  子类类型();

如：
    Person p = new Student();
    p.show();


解析：
    在编译阶段p是Person类型，因此调用Person类自己的show()方法，若没有则编译的时候就报错。
    在运行阶段p真正指向的对象是Student类型，因此最终调用的是Student类中自己的show()方法。


当使用多态方式调用方法的时候，首先会检查父类中是否有该方法，如果没有，则编译报错。
如果有，再去调用子类的同名方法。(注意：静态static方法属于特殊情况，静态方法只能继承，不能重写override，如果
子类中定义了同名同形式的静态方法，它对父类方法只能起到隐藏的作用。调用的时候用谁的引用，则调用谁的版本。)       


课堂小案例：
    自定义Person类实现封装，特征由：姓名和年龄
    自定义Student类继承自Person类实现封装，特征有：学号。
    自定义TestPersonStudent类，在main()方法中使用Person类的引用指向Student类的对象。


多态存在的三个比较条件：
    1.要有继承
    2.要有重写
    3.父类引用指向子类对象

多态的效果

1.对于指向子类对象的父类来说，在编译期间只能调用父类的方法，不能直接调用子类的方法。
2.对于父子类都有的非静态方法来说，最终调用子类中的重写版本。
3.对于父子类中都有的静态方法来说 ，最终调用父类中的版本，与指向的对象类型无关。

引用类型之间的转换

基本概述
    1.引用类型之间的转换必须发生在父子类之间，分为自动类型转换(向上转换)和强制类型转换(向下转换)


    2.向上转换(子类类型向父类类型的转换)
        父类引用指向子类对象： Person p = new Student();
        把一个子类对象转换为父类对象，向上转型(自动转型、隐式转型)，代码中是父类引用指向子类的对象，父类
        引用指向类型实例，可以调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法。

        注意：
            父类中的静态方法无法被子类重写，所以向上转型之后只能调用父类原有的静态方法。


    3.向下转换(父类类型向子类类型的转换)
        子类引用指向父类实例，必须进行强制类型转换，可以调用子类特有的方法。必须满足转型的条件才能。

        instanceof 运算符可以进行判断，左边的对象是否是他右边对象的实例，换句话来说就是左侧对象是否满足右侧对象类型
        的特征如果是返回true

        if(p instanceof Teacher){}

        父类中的静态方法(含有static修饰的方法，只能被子类继承使用无法被子类重写)。


    4.当没有父子类关系发生强制类型转换则编译报错，当拥有父子类关系发生强制转换是编译通过，
        若目标类型并不是该引用真正指向的类型时，在运行阶段发生类型转换异常。

    5.为了避免上述错误的发生，通常只要进行强制类型转换就需要进行判断，格式如下：
            if(引用变量名  instanceof 数据类型){}
            - 判断引用指向的对象是否为指定的数据类型，若是则返回true，否则返回false；

多态的实际意义

多态的意义在于：可以屏蔽不同子类的差异性编写通用的代码，从而产生不同的效果。
