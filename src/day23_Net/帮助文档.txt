1.网络编程的基本常识

	目前主流的网络通信软件有：QQ、微信、MSN、飞信、阿里旺旺.....
	
2.七层协议
	ISO(国际标准委员会组织)将数据的传递从逻辑上划分了一下七层：
		应用层、表示层、回话层、传输层、网络层、数据链路层、物理层。
	
	当发送消息时。需要按照上述从前向后的次序对发送的内容进行层层加包，然后发送过去
	当接收消息时。需要按照上述相反的次序对接收到的内容层层拆包，然后再解析出来。

3.常见协议
	http - 超文本传输协议，浏览网站的时候使用该协议
	ftp  - 文件传输协议，上传下载文件时候使用该协议
	tcp  - 传输控制协议，是一种面向连接的协议，类似与打电话，网络通信需要使用该协议。
	udp  - 用户数据报协议，是一种非面向连接的协议，类似于写信，网络通信使用该协议。
	ip   - 互联网协议，是上述协议的底层协议
	
	协议 - 就是一种约定/规则，是通信双方需要遵循的一种机制。
	
4.网络通信三要素
	案例：
		比如说：我要跟你说话
			第一个条件：我要找到你(IP)
			第二个条件：你的有接收数据的地方  耳朵(端口)
			第三个条件：我跟你说话，你能接收到，按照什么方式接收，说英文你懂吗，说日文你懂吗，不懂，所以我还是说中文(协议)
	
	
	IP:
		InetAddress：此类表示互联网协议 (IP) 地址。 

		255
		192.168.1.1
		
		IP地址的底层是由32位二进制组成的整数，叫做IPV4。也有128位二进制组成的整数，叫做IPV6
	
	
	端口：
		IP地址-可以定位到具体的一台设备
		端口号-可以定位到设备上具体的进程
		在网络编程中需要提供：IP地址+端口号
		
		
		端口号：本质上就是由16位二进制组成的整数，范围是：0~65535,其中0~1024之间的端口已经被系统占用，因此编程需要从1025开始使用
		
	
	协议：
		TCP：
			面向连接、安全可靠、效率稍低、通过三次握手建立连接
			tcp 是一种面向连接协议类似与打电话
			是一种全双工的字节流通信方式
			服务器器压力比较大，资源消耗比较高。发送数据的效率相对比较低
				举例：
					下载、打电话、QQ聊天
					
		
			编程模型：
				服务器：
					1.创建ServerSocket类的对象，并提供端口号。
					2.等待客户端连接，使用accept()方法
					3.等Socket对象，并使用输入输出流进行通信
					4.关闭相互资源
				客户端：	
					1.创建Socket类型的对象，并指定服务器的IP地址和端口号
					2.使用输入输出流进行通信
					3.关闭相互资源
				
				
			ServerSocket类
				ServerSocket(int port)
				accept()   用于监听并接收到服务器套接字的连接请求
				
				close() - 关闭套接字
		
			Socket类
		
				getInputStream：用于获取次套接字的输入流
				getOutputStream：用于获取次套接字的输出流
				close- 用于关闭套接字
			
		UDP：
			面向无连接、不可靠、速度快、将数据封装包传输，数据包最大64k
			是一种全双工的数据报通信方式
			服务器压力比较小，资源消耗低，发送数据的效率相对比较高
				举例：
					发短信、在线视频...
					
			编程模型：
				主机A(接收方)：
					1.创建DatagramSocket类型的对象，并提供端口号
					2.创建DatagramPacket类型的对象，用于接收发来的数据
					3.使用上述的对象接收数据内容，使用recieve()方法。
					4.关闭相关资源
				
				主机B(发送方)：
					1.创建DatagramSocket类型的对象。
					2.创建DatagramPacket类型的对象，并提供端口号和IP地址
					3..使用上述的对象发送数据内容，使用send()方法。
					4.关闭相关资源
			
			
			DatagramSocket：类是用于创建接收和发送数据报的套接字
				DatagramSocket() --无参
				DatagramSocket(int port) - 创建套接字并绑定端口号
				void receive(DatagramPacket p)-用于接收数据并放到参数指定的数据报中
				void send(DatagramPacket p) - 用于将参数指定的数据报发送出去
				void close() - 关闭套接字
			
			DatagramPacket：类用于描述数据报内容
				DatagramPacket(byte[] buf, int length) 
          			构造 DatagramPacket，用来接收长度为 length 的数据包。 
				DatagramPacket(byte[] buf, int length, InetAddress address, int port) 
          			构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。 
          			
          			InetAddress getAddress() - 用于获取发送方/接收方IP地址信息
          			int getPort() - 用于获取发送方/接收方端口号信息  
          			int getLength() - 用于获取数据报中数据的长度
				
			
			
5.Socket			
	Socket套接字：
		网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。
	Socket原理机制：
		通信的两端都有Socket。
		网络通信其实就是Socket间的通信。
		数据在两个Socket间通过IO传输。
		
		
		
	
		
		
		
		
		
		
		